.program ms

; 01.07.2024 - Changed code to remove sideset and just use set (iMo, EEVBlog)

entry:
    set pins  0b000
    mov X     !NULL
    out Y     32
    irq       0      [9]
start:
    set pins  0b101
    jmp pin   high      
    set pins  0b110  [12]
    jmp Y--   start
    jmp       exit
high:
    jmp X--   dummy  [11]
dummy:
    set pins  0b110
    jmp Y--   start
    jmp       exit
exit:
    set pins  0b000
    in  X     32
    irq       0      [9]
.wrap_target
dither:
    jmp !OSRE entry
    set pins  0b001
    jmp pin   dither
    set pins  0b010  [1]
.wrap

% c-sdk {

// Helper function (for use in C program) to initialize this PIO program
void ms_program_init(PIO pio, uint sm, uint offset, uint pin, uint input, float div, uint pin_MEAS) {

    // Sets up state machine and wrap target. This function is automatically
    pio_sm_config c = ms_program_get_default_config(offset);
    
    // sm_config_set_sideset_pins(&c, pin_MEAS); //side set
    
    // Allow PIO to control GPIO pin (as output)
    pio_gpio_init(pio, pin);
    pio_gpio_init(pio, pin+1);
    pio_gpio_init(pio, pin_MEAS);      
    
    
    // set the pin for jump if pin high instruction
    sm_config_set_jmp_pin(&c, input); 

    // Connect pin to SET pin (control with 'set' instruction)
    sm_config_set_set_pins(&c, pin, 3);
    
    // Set the pin direction to output (in PIO)
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 3, true);      // 2 pins for PWM high and low
    // pio_sm_set_consecutive_pindirs(pio, sm, pin_MEAS, 1, true); // 1 pin for MEAS pin

    // Set auto push to ISR
    sm_config_set_in_shift(&c, false, true, 32);
    sm_config_set_out_shift(&c, false, true, 32);
    // Set the clock divider for the state machine
    sm_config_set_clkdiv(&c, div);

    // Load configuration and jump to start of the program
    pio_sm_init(pio, sm, offset, &c);
}

%}

.program residue

.wrap_target
prog:
    wait 1 irq 0
    set  X     17
loop:
    set  pins  0b1
    set  pins  0b0
    jmp  X--   loop
.wrap 

% c-sdk {

// Helper function (for use in C program) to initialize this PIO program
void residue_program_init(PIO pio, uint sm, uint offset, uint pin, float div) {

    // Sets up state machine and wrap target. This function is automatically
    pio_sm_config c = residue_program_get_default_config(offset);
    
    // Allow PIO to control GPIO pin (as output)
    pio_gpio_init(pio, pin);    

    // Connect pin to SET pin (control with 'set' instruction)
    sm_config_set_set_pins(&c, pin, 1);
    
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, true);      // 2 pins for PWM high and low

    // Set auto push to ISR
    // sm_config_set_in_shift(&c, false, true, 32);
    // sm_config_set_out_shift(&c, false, true, 32);
    // Set the clock divider for the state machine
    sm_config_set_clkdiv(&c, div);

    // Load configuration and jump to start of the program
    pio_sm_init(pio, sm, offset, &c);
}

%}