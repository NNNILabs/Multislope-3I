.program ms

high:
    jmp X--   switch [11]
entry:
    set pins  0b000
    mov X     !NULL
    out Y     32
    irq wait  0      
start:
    set pins  0b101
    jmp pin   high      
    set pins  0b110  [11]
switch:
    set pins  0b110
    jmp Y--   start
    set pins  0b000
    in X      32

;     set pins  0b001
; runup_high:
;     jmp pin   runup_high
;     set pins  0b010
; runup_low:
;     jmp pin   stop
;     jmp       runup_low
; stop:
;     set pins  0b000

    irq wait  0

.wrap_target
dither:
    jmp !OSRE entry
    set pins  0b001
    jmp pin   dither
    set pins  0b010  [1]
.wrap

% c-sdk {

// Helper function (for use in C program) to initialize this PIO program
void ms_program_init(PIO pio, uint sm, uint offset, uint pin, uint input, float div, uint pin_MEAS) {

    // Sets up state machine and wrap target. This function is automatically
    pio_sm_config c = ms_program_get_default_config(offset);
    
    // sm_config_set_sideset_pins(&c, pin_MEAS); //side set
    
    // Allow PIO to control GPIO pin (as output)
    pio_gpio_init(pio, pin);
    pio_gpio_init(pio, pin+1);
    pio_gpio_init(pio, pin_MEAS);      
    
    
    // set the pin for jump if pin high instruction
    sm_config_set_jmp_pin(&c, input); 

    // Connect pin to SET pin (control with 'set' instruction)
    sm_config_set_set_pins(&c, pin, 3);
    
    // Set the pin direction to output (in PIO)
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 3, true);

    // Set auto push to ISR
    sm_config_set_in_shift(&c, false, true, 32);
    sm_config_set_out_shift(&c, false, true, 32);
    // Set the clock divider for the state machine
    sm_config_set_clkdiv(&c, div);

    // Load configuration and jump to start of the program
    pio_sm_init(pio, sm, offset, &c);
}

%}

.program calibration

.wrap_target
dither:
    jmp !OSRE start
    set pins  0b001
    jmp pin   dither
    set pins  0b010  [19]
.wrap

start:
    out X    32
    set pins 0b000
    irq      wait 0
runup_u:
    set pins 0b001  [13]
    set pins 0b010  [1]
    set pins 0b000
    irq      wait 0
runup_ud:
    set pins 0b001  [13]
    set pins 0b010  [1]
    set pins 0b001  [1]
    set pins 0b010  [13]
    set pins 0b000
    irq      wait 0
runup_udu:
    set pins 0b001  [13]
    set pins 0b010  [1]
    set pins 0b001  [1]
    set pins 0b010  [13]
    set pins 0b001  [13]
    set pins 0b010  [1]
    set pins 0b000
    irq      wait 0
    jmp      dither

% c-sdk {

// Helper function (for use in C program) to initialize this PIO program
void calibration_program_init(PIO pio, uint sm, uint offset, uint pin, uint input, float div, uint pin_MEAS) {

    // Sets up state machine and wrap target. This function is automatically
    pio_sm_config c = calibration_program_get_default_config(offset);
    
    // Allow PIO to control GPIO pin (as output)
    pio_gpio_init(pio, pin);
    pio_gpio_init(pio, pin+1);
    pio_gpio_init(pio, pin_MEAS);      
    
    
    // set the pin for jump if pin high instruction
    sm_config_set_jmp_pin(&c, input); 

    // Connect pin to SET pin (control with 'set' instruction)
    sm_config_set_set_pins(&c, pin, 3);
    
    // Set the pin direction to output (in PIO)
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 3, true);

    // Set auto push to ISR
    sm_config_set_in_shift(&c, false, true, 32);
    sm_config_set_out_shift(&c, false, true, 32);

    // Set the clock divider for the state machine
    sm_config_set_clkdiv(&c, div);

    // Load configuration and jump to start of the program
    pio_sm_init(pio, sm, offset, &c);
}

%}

.program residue
.side_set 2 opt

.wrap_target
    wait 0     irq 0   side 0b10
    set  X     16      side 0b00
loop:
    out  pins  1       side 0b00 [1]
    in   pins  1       side 0b01
    jmp  X--   loop
    irq        clear 0 side 0b10
.wrap 

% c-sdk {

// Helper function (for use in C program) to initialize this PIO program
void residue_program_init(PIO pio, uint sm, uint offset, uint pin, float div) {

    pio_sm_config c = residue_program_get_default_config(offset);
    
    pio_gpio_init(pio, pin);
    pio_gpio_init(pio, pin + 1);
    pio_gpio_init(pio, pin + 2);
    pio_gpio_init(pio, pin + 3);

    pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, false);
    pio_sm_set_consecutive_pindirs(pio, sm, pin + 1, 1,true);  
    pio_sm_set_consecutive_pindirs(pio, sm, pin + 2, 1, true);
    pio_sm_set_consecutive_pindirs(pio, sm, pin + 3, 1, true);

    sm_config_set_out_pins(&c, pin + 1, 1);
    sm_config_set_in_pins(&c, pin);
    sm_config_set_sideset_pins(&c, pin + 2);

    sm_config_set_out_shift(&c, false, true, 17);
    sm_config_set_in_shift(&c, false, true, 17);

    sm_config_set_clkdiv(&c, div);

    pio_sm_init(pio, sm, offset, &c);
}

%}