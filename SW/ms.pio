.program ms
.side_set 1
; 1 side set bit for the MEAS pin

; don't forget to enable auto push
start:
    set pins 0          side 0
    mov X, !NULL        side 0              ; set X to 0xFFFFFFFF
    out Y, 32           side 0              ; read the number desired counts
    irq 0               side 0              ; first residue reading
    out NULL, 32        side 0              ; stall until DMA finished reading the ADC

beginning:
	set pins, 1         side 1
	jmp pin pwmhigh     side 1 
	set pins, 2         side 1 [15]
	jmp Y-- beginning   side 1 [13]
	jmp finish          side 0
	
pwmhigh:
	jmp X-- dummy       side 1 [15]
dummy:
    nop                 side 1 [11]
	set pins 2          side 1
	jmp Y-- beginning   side 1 
	jmp finish          side 0

finish:
    set pins 0          side 0              ; turn switches off
    in  X, 32           side 0              ; push PWM to FIFO
    irq 1               side 0              ; second residue reading
    out NULL, 32        side 0              ; stall until DMA finished reading the ADC

.wrap_target
dither:
    jmp !OSRE start     side 0              ; jump out of desaturation when the OSR has data 
    set pins 1          side 0              ; set pin polarity
    jmp pin dither      side 0              ; check if the integrator is still high
    set pins, 2         side 0 [1]
.wrap

// Tried and tested PIO code to read from the MCP3202
// Set in and out shift to 18
/*
.program output
.side_set 2

.wrap_target
    bitloop:
        out pins, 1           side 0 [1]
        in  pins, 1           side 2
        jmp x--   bitloop     side 2
        out pins, 1           side 0
        mov x,    y           side 0     ; Reload bit counter from Y
        in  pins, 1           side 2
        jmp !osre bitloop     side 2     ; Fall-through if TXF empties
        nop                   side 0 [1] ; CSn back porch
    public entry_point:                  ; Must set X,Y to n-2 before starting!
        pull ifempty          side 1 [1] ; Block with CSn high (minimum 2 cycles)
.wrap
*/

% c-sdk {

// Helper function (for use in C program) to initialize this PIO program
void ms_program_init(PIO pio, uint sm, uint offset, uint pin, uint input, float div, uint pin_MEAS) {

    // Sets up state machine and wrap target. This function is automatically
    pio_sm_config c = ms_program_get_default_config(offset);
    
    sm_config_set_sideset_pins(&c, pin_MEAS); //side set
    
    // Allow PIO to control GPIO pin (as output)
    pio_gpio_init(pio, pin);
    pio_gpio_init(pio, pin+1);
    pio_gpio_init(pio, pin_MEAS);      
    
    
    // set the pin for jump if pin high instruction
    sm_config_set_jmp_pin(&c, input); 

    // Connect pin to SET pin (control with 'set' instruction)
    sm_config_set_set_pins(&c, pin, 2);
    
    // Set the pin direction to output (in PIO)
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 2, true);      // 2 pins for PWM high and low
    pio_sm_set_consecutive_pindirs(pio, sm, pin_MEAS, 1, true); // 1 pin for MEAS pin

    // Set auto push to ISR
    sm_config_set_in_shift(&c, false, true, 32);
    sm_config_set_out_shift(&c, false, true, 32);
    // Set the clock divider for the state machine
    sm_config_set_clkdiv(&c, div);

    // Load configuration and jump to start of the program
    pio_sm_init(pio, sm, offset, &c);
}

%}