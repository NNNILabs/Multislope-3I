.program ms
.pio_version 1

; Complementary PWM runup

high:
    jmp X--   switch       [27] ;[25]
entry:
    set pins  0b000
    mov X     !NULL
    out Y     32           [31]
    irq       0            [31]
start:
    set pins  0b101        ; [2]
    jmp pin   high      
    set pins  0b110        [27] ;[25]
switch:
    set pins  0b110
    jmp Y--   start

; Jaromir runup

; high:
;     set pins  0b101
;     jmp X--   switch       [26]
; entry:
;     set pins  0b000
;     mov X     !NULL
;     out Y     32           [31]
;     irq       0            [31]
; start:
;     set pins  0b111
;     jmp pin   high      
;     set pins  0b110        [27]
; switch:
;     set pins  0b100
;     jmp Y--   start

; RZ PWM (there's no way this is going to fit lol, no point trying to break my head over it)
 
; high:
;     nop                    [23]
;     set pins  0b100
;     jmp X--   end
; entry:
;     set pins  0b100
;     mov X     !NULL
;     out Y     32           [31]
;     irq       0            [31]
; start:
;     set pins  0b101
;     jmp pin   high
;     set pins  0b100        [1]
;     set pins  0b110        [23]
; end:
;     set pins  0b110        [1]
;     set pins  0b100
;     jmp Y--   start

    set pins  0b000
    in  X     32

    set pins  0b001
rundown_high:
    jmp X--   skip
skip:
    jmp pin   rundown_high 
    in  X     32
    set pins  0b010
rundown_low:
    jmp pin   low_stop
    jmp X--   rundown_low
low_stop:
    set pins  0b000
    in  X     32          [31]

    irq       0           [31]

.wrap_target
    set pins  0b001
dither_high:
    jmp pin   dither_high
    set pins  0b010       [1]
    jmp !OSRE entry
.wrap

% c-sdk {

// Helper function (for use in C program) to initialize this PIO program
void ms_program_init(PIO pio, uint sm, uint offset, uint pin, uint input, float div, uint pin_MEAS) {

    // Sets up state machine and wrap target. This function is automatically
    pio_sm_config c = ms_program_get_default_config(offset);
    
    // sm_config_set_sideset_pins(&c, pin_MEAS); //side set
    
    // Allow PIO to control GPIO pin (as output)
    pio_gpio_init(pio, pin);
    pio_gpio_init(pio, pin+1);
    pio_gpio_init(pio, pin_MEAS);
    pio_gpio_init(pio, input);     

    // Set the pin direction to output (in PIO)
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 3, true);
    pio_sm_set_consecutive_pindirs(pio, sm, input, 1, false);
    
    // set the pin for jump if pin high instruction
    sm_config_set_jmp_pin(&c, input); 

    // Connect pin to SET pin (control with 'set' instruction)
    sm_config_set_set_pins(&c, pin, 3);

    // Set auto push to ISR
    sm_config_set_in_shift(&c, false, true, 32);
    sm_config_set_out_shift(&c, false, true, 32);
    // Set the clock divider for the state machine
    sm_config_set_clkdiv(&c, div);

    // Load configuration and jump to start of the program
    pio_sm_init(pio, sm, offset, &c);
}

%}

.program residue
.side_set 2

.wrap_target
    wait 1     irq 0       side 0b10 [7]
    set  X     14          side 0b00 [7]
loop:
    nop                    side 0b01 [1]
    ; nop                    side 0b00
    in   pins  1           side 0b00
    jmp  X--   loop        side 0b00
.wrap 

% c-sdk {

// Helper function (for use in C program) to initialize this PIO program
void residue_program_init(PIO pio, uint sm, uint offset, uint pin, float div) {

    pio_sm_config c = residue_program_get_default_config(offset);
    
    pio_gpio_init(pio, pin);
    pio_gpio_init(pio, pin + 1);
    pio_gpio_init(pio, pin + 2);

    pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, false);
    pio_sm_set_consecutive_pindirs(pio, sm, pin + 1, 1, true);  
    pio_sm_set_consecutive_pindirs(pio, sm, pin + 2, 1, true);

    sm_config_set_in_pins(&c, pin);
    sm_config_set_sideset_pins(&c, pin + 1); // initialize sideset LSB

    sm_config_set_in_shift(&c, false, true, 15);

    sm_config_set_clkdiv(&c, div);

    pio_sm_init(pio, sm, offset, &c);
}

%}

.program calibration

.wrap_target
dither_start:
    jmp !OSRE start
    set pins  0b001
dither_high:
    jmp pin   dither_high
    set pins  0b010       [1]
.wrap

start:
    out X    32
    set pins 0b001 
    set pins 0b000        [31]
    irq   wait   0        [31]
    nop                   [31]
runup_u:
    set pins 0b010        [1]
    set pins 0b000        [31]
    irq   wait   0        [31]
    nop                   [31]
runup_ud:
    set pins 0b001        [1]
    set pins 0b000        [31]
    irq wait     0        [31]
    nop                   [31]
    jmp      dither_start

% c-sdk {

// Helper function (for use in C program) to initialize this PIO program
void calibration_program_init(PIO pio, uint sm, uint offset, uint pin, uint input, float div, uint pin_MEAS) {

    // Sets up state machine and wrap target. This function is automatically
    pio_sm_config c = calibration_program_get_default_config(offset);
    
    // Allow PIO to control GPIO pin (as output)
    pio_gpio_init(pio, pin);
    pio_gpio_init(pio, pin+1);
    pio_gpio_init(pio, pin_MEAS);    
    pio_gpio_init(pio, input);  

    pio_sm_set_consecutive_pindirs(pio, sm, pin, 3, true);
    pio_sm_set_consecutive_pindirs(pio, sm, input, 1, false);
    
    // set the pin for jump if pin high instruction
    sm_config_set_jmp_pin(&c, input); 

    // Connect pin to SET pin (control with 'set' instruction)
    sm_config_set_set_pins(&c, pin, 3);
    
    // Set the pin direction to output (in PIO)
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 3, true);

    // Set auto push to ISR
    sm_config_set_in_shift(&c, false, true, 32);
    sm_config_set_out_shift(&c, false, true, 32);

    // Set the clock divider for the state machine
    sm_config_set_clkdiv(&c, div);

    // Load configuration and jump to start of the program
    pio_sm_init(pio, sm, offset, &c);
}

%}

; best done in the same state machine as runup!

; .program rundown

; .wrap_target
;     wait 0    irq 1
;     mov  X    !NULL
;     set  pins 0b10
; low:
;     jmp pin   stop
;     jmp X--   low
;     set pins  0b01
; high:
;     jmp X--   skip
; skip:
;     jmp pin   high
;     ; in  X     32
; stop:
;     ; in  X     32
;     set pins  0b00
;     irq       clear 1    
; .wrap

; % c-sdk {

; // Helper function (for use in C program) to initialize this PIO program
; void rundown_program_init(PIO pio, uint sm, uint offset, uint pin1, uint pin2, float div) {

;     pio_sm_config c = rundown_program_get_default_config(offset);
    
;     pio_gpio_init(pio, pin1);
;     pio_gpio_init(pio, pin2);

;     pio_sm_set_consecutive_pindirs(pio, sm, pin1, 2, true);

;     sm_config_set_set_pins(&c, pin1, 2);

;     sm_config_set_in_shift(&c, false, true, 32);

;     sm_config_set_clkdiv(&c, div);

;     pio_sm_init(pio, sm, offset, &c);
; }

; %}